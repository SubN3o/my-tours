<?php

namespace MyOrleansBundle\Repository;

use MyOrleansBundle\Entity\Article;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{


    public function findOneActu()
    {
        $qb = $this->createQueryBuilder('a')
            ->orderBy('a.id', 'DESC')
            ->setMaxResults(1);
        return $qb->getQuery()->getResult();
    }

    public function articleByTri()
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.tri IS NOT NULL')
            ->orderBy('a.tri', 'ASC')
            ->setMaxResults(4);

        return $qb->getQuery()->getResult();
    }


    public function articleByKeyword($data)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.titre LIKE :keyword ')
            ->orWhere('ta.nom LIKE :keyword')
            ->orWhere('ty.nom LIKE :keyword')
            ->orWhere('a.texte LIKE :keyword')
            ->setParameter('keyword', '%'.$data['keyword'].'%')
            ->join('a.tags','ta')
            ->join('a.typeArticle','ty')
            ->orderBy('a.date','DESC')
        ;

        return $qb->getQuery()->getResult();
    }

    public function articleByType($idArticle, $typeArticle)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.id NOT IN(:idArticle)')
            ->andWhere('a.typeArticle = :typeArticle')
            ->setParameter('idArticle', $idArticle)
            ->setParameter('typeArticle', $typeArticle);

        return $qb->getQuery()->getResult();
    }

    public function lastArticle($idArticles)
    {
        $qb = $this->createQueryBuilder('a');

        $qb
            ->where('a.id NOT IN(:idArticles)')
            ->setParameter('idArticles', $idArticles)
            ->orderBy('a.date','DESC')
            ->setMaxResults(1);

        return $qb->getQuery()->getResult();

    }

    public function findLatestArticles($limit = Article::NUM_ARTICLES)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->select('a')
            ->orderBy('a.id', 'DESC')
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

}
