<?php

namespace MyOrleansBundle\Repository;

/**
 * ResidenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResidenceRepository extends \Doctrine\ORM\EntityRepository
{
    public function simpleSearch($ville, $type)
    {
        $qb = $this->createQueryBuilder('r');

        if (!empty($ville)) {
            $qb->andWhere('v.nom LIKE :ville')
                ->setParameter('ville', '%'.$ville.'%')
                ->join('r.ville', 'v');
        }

        if (!empty($type)) {
            $qb->andWhere('t.nom = :type')
                ->setParameter('type', $type)
                ->join('r.flats', 'f')
                ->join('f.typeLogement', 't');
        }

        return $qb->getQuery()->getResult();
    }


    public function completeSearch($ville, $quartier, $type, $surfaceMin, $surfaceMax, $nbChambres, $budgetMin, $budgetMax)
    {
        $qb = $this->createQueryBuilder('r');

        if (!empty($ville)) {
            $qb->andWhere('v.nom LIKE :ville')
                ->setParameter('ville', '%'.$ville.'%')
                ->join('r.ville', 'v');
        }

        if (!empty($quartier)) {
            $qb->andWhere('q.nom LIKE :quartier')
                ->setParameter('quartier', '%'.$quartier.'%')
                ->join('r.quartier', 'q');
        }

        if (!empty($type)) {
            $qb->andWhere('t.nom = :type')
                ->setParameter('type', $type)
                ->join('r.flats', 'f')
                ->join('f.typeLogement', 't');
        }

        if (!empty($surfaceMin)) {
            $qb->andWhere('fl.surface >= :surfaceMin')
                ->setParameter('surfaceMin', $surfaceMin)
                ->join('r.flats', 'fl');
        }

        if (!empty($surfaceMax)) {
            $qb->andWhere('fla.surface <= :surfaceMax')
                ->setParameter('surfaceMax', $surfaceMax)
                ->join('r.flats', 'fla');
        }

        if (!empty($nbChambres)) {
            $qb->andWhere('flt.nbChambre >= :nbChambres')
                ->setParameter('nbChambres', $nbChambres)
                ->join('r.flats', 'flt');
        }

        if (!empty($budgetMin)) {
            $qb->andWhere('ft.prix >= :budgetMin')
                ->setParameter('budgetMin', $budgetMin)
                ->join('r.flats', 'ft');
        }

        if (!empty($budgetMax)) {
            $qb->andWhere('fts.prix < :budgetMax ')
                ->setParameter('budgetMax', $budgetMax)
                ->join('r.flats', 'fts');
        }

// En attente validation client de la suppression de ce critere
//        if (!empty($nbPieces)) {
//            $qb->andWhere('t.nbPiece >= :nbPieces')
//                ->setParameter('nbPieces', $nbPieces)
//                ->join('r.flats', 'f');
//        }

        $qb->andWhere('flts.statut = 1')
            ->join('r.flats', 'flts');


        return $qb->getQuery()->getResult();
    }


    public function findAllLimit()
    {
        $qb = $this->createQueryBuilder('r')
            ->setMaxResults(3);
        return $qb->getQuery()->getResult();

    }

}
