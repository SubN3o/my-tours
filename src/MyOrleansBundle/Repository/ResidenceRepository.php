<?php

namespace MyOrleansBundle\Repository;

/**
 * ResidenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResidenceRepository extends \Doctrine\ORM\EntityRepository
{
    public function simpleSearch($ville, $type)
    {
        $qb = $this->createQueryBuilder('r');

        $qb->andWhere('f.statut = true')
            ->orderBy('r.tri', 'ASC')
            ->join('r.flats', 'f');

        if (!empty($ville)) {
            $qb->andWhere('v.nom LIKE :ville')
                ->setParameter('ville', '%' . $ville . '%')
                ->join('r.ville', 'v');
        }

        if (!empty($type)) {
            $qb->andWhere('t.nom = :type')
                ->setParameter('type', $type)
                ->join('f.typeLogement', 't');
       }

        return $qb->getQuery()->getResult();
    }


    public function completeSearch($data)
    {
        $qb = $this->createQueryBuilder('r');

        $qb->andWhere('f.statut = true')
            ->orderBy('r.tri', 'ASC')
            ->join('r.flats', 'f');


        if (!empty($data['ville'])) {
            $qb->andWhere('v.nom LIKE :ville')
                ->setParameter('ville', '%' . $data['ville'] . '%')
                ->join('r.ville', 'v');
        }


        if (!empty($data['typeLogement'])) {
            $qb->andWhere('t.id IN(:type)')
                ->setParameter('type', $data['typeLogement'])
                ->join('f.typeLogement', 't');
        }


        if (!empty($data['budgetMin'])) {
            $qb->andWhere('f.prix >= :budgetMin')
                ->setParameter('budgetMin', $data['budgetMin']);
        }

        if (!empty($data['budgetMax'])) {
            $qb->andWhere('f.prix <= :budgetMax ')
                ->setParameter('budgetMax', $data['budgetMax']);
        }

        return $qb->getQuery()->getResult();
    }


    public function suggestResidence($idResidence)
    {
        $qb = $this->createQueryBuilder('r')
            ->where('r.id NOT IN(:idResidence)')
            ->setParameter('idResidence', $idResidence)
            ->andWhere('r.favoris = true')
            ->orderBy('r.tri', 'ASC')
            ->setMaxResults(4);

        return $qb->getQuery()->getResult();
    }

    public function findAllLimit()
    {
        $qb = $this->createQueryBuilder('r')
            ->orderBy('r.id', 'DESC')
            ->setMaxResults(6);
        return $qb->getQuery()->getResult();

    }

    public function findOneFav()
    {
        $qb = $this->createQueryBuilder('r')
            ->where('r.favoris = 1')
            ->orderBy('r.tri', 'ASC')
            ->setMaxResults(1);
        return $qb->getQuery()->getResult();
    }

    public function findTwoFav()
    {
        $qb = $this->createQueryBuilder('r')
            ->where('r.favoris = 1')
            ->orderBy('r.tri', 'ASC')
            ->setMaxResults(2);
        return $qb->getQuery()->getResult();
    }

    public function allCity()
    {
        $qb = $this->createQueryBuilder('r')
            ->select('v.nom')->distinct()
            ->join('r.ville', 'v');
        return $qb->getQuery()->getResult();
    }
}

